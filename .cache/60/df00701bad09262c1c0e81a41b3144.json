{"id":"node_modules/follow/node_modules/request/uuid.js","dependencies":[{"name":"/Users/ross/Projects/picross-2/package.json","includedInParent":true,"mtime":1594258867440},{"name":"/Users/ross/Projects/picross-2/node_modules/follow/node_modules/request/package.json","includedInParent":true,"mtime":1594258867057}],"generated":{"js":"module.exports = function () {\n  var s = [], itoh = '0123456789ABCDEF';\n \n  // Make array of random hex digits. The UUID only has 32 digits in it, but we\n  // allocate an extra items to make room for the '-'s we'll be inserting.\n  for (var i = 0; i <36; i++) s[i] = Math.floor(Math.random()*0x10);\n \n  // Conform to RFC-4122, section 4.4\n  s[14] = 4;  // Set 4 high bits of time_high field to version\n  s[19] = (s[19] & 0x3) | 0x8;  // Specify 2 high bits of clock sequence\n \n  // Convert to hex chars\n  for (var i = 0; i <36; i++) s[i] = itoh[s[i]];\n \n  // Insert '-'s\n  s[8] = s[13] = s[18] = s[23] = '-';\n \n  return s.join('');\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/follow/node_modules/request/uuid.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}}],"sources":{"node_modules/follow/node_modules/request/uuid.js":"module.exports = function () {\n  var s = [], itoh = '0123456789ABCDEF';\n \n  // Make array of random hex digits. The UUID only has 32 digits in it, but we\n  // allocate an extra items to make room for the '-'s we'll be inserting.\n  for (var i = 0; i <36; i++) s[i] = Math.floor(Math.random()*0x10);\n \n  // Conform to RFC-4122, section 4.4\n  s[14] = 4;  // Set 4 high bits of time_high field to version\n  s[19] = (s[19] & 0x3) | 0x8;  // Specify 2 high bits of clock sequence\n \n  // Convert to hex chars\n  for (var i = 0; i <36; i++) s[i] = itoh[s[i]];\n \n  // Insert '-'s\n  s[8] = s[13] = s[18] = s[23] = '-';\n \n  return s.join('');\n}\n"},"lineCount":20}},"error":null,"hash":"d11b4c5403627da4fa36a62747581ead","cacheData":{"env":{}}}