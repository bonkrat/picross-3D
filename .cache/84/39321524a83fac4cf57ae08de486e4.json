{"id":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","dependencies":[{"name":"/Users/ross/Projects/picross-2/package.json","includedInParent":true,"mtime":1594439479060},{"name":"/Users/ross/Projects/picross-2/node_modules/troika-three-utils/package.json","includedInParent":true,"mtime":1594331649814},{"name":"three","loc":{"line":2,"column":90},"parent":"/Users/ross/Projects/picross-2/node_modules/troika-three-utils/dist/troika-three-utils.umd.js","resolved":"/Users/ross/Projects/picross-2/node_modules/three/build/three.module.js"}],"generated":{"js":"var define;\nvar global = arguments[3];\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('three')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'three'], factory) :\n  (global = global || self, factory(global.troika_three_utils = {}, global.THREE));\n}(this, (function (exports, three) { 'use strict';\n\n  /**\n   * Regular expression for matching the `void main() {` opener line in GLSL.\n   * @type {RegExp}\n   */\n  var voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n\n  /**\n   * Recursively expands all `#include <xyz>` statements within string of shader code.\n   * Copied from three's WebGLProgram#parseIncludes for external use.\n   *\n   * @param {string} source - The GLSL source code to evaluate\n   * @return {string} The GLSL code with all includes expanded\n   */\n  function expandShaderIncludes( source ) {\n    var pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n    function replace(match, include) {\n      var chunk = three.ShaderChunk[include];\n      return chunk ? expandShaderIncludes(chunk) : match\n    }\n    return source.replace( pattern, replace )\n  }\n\n  // Local assign polyfill to avoid importing troika-core\n  var assign = Object.assign || function(/*target, ...sources*/) {\n    var arguments$1 = arguments;\n\n    var target = arguments[0];\n    for (var i = 1, len = arguments.length; i < len; i++) {\n      var source = arguments$1[i];\n      if (source) {\n        for (var prop in source) {\n          if (source.hasOwnProperty(prop)) {\n            target[prop] = source[prop];\n          }\n        }\n      }\n    }\n    return target\n  };\n\n\n  var epoch = Date.now();\n  var CACHE = new WeakMap(); //threejs requires WeakMap internally so should be safe to assume support\n\n\n  /**\n   * A utility for creating a custom shader material derived from another material's\n   * shaders. This allows you to inject custom shader logic and transforms into the\n   * builtin ThreeJS materials without having to recreate them from scratch.\n   *\n   * @param {THREE.Material} baseMaterial - the original material to derive from\n   *\n   * @param {Object} options - How the base material should be modified.\n   * @param {Object} options.defines - Custom `defines` for the material\n   * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\n   * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\n   *        be accessed and manipulated via the resulting material's `uniforms` property, just like\n   *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\n   * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\n   *        both shaders, and it will automatically be updated on each render frame with a number of\n   *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\n   *        true calendar time.\n   * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\n   *        definitions, above the `void main()` function.\n   * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\n   *        shader's `void main` function.\n   * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\n   *        shader's `void main` function.\n   * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\n   *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\n   *        those attributes exposed by their normal names as read/write values.\n   * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\n   *        definitions, above the `void main()` function.\n   * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\n   *        shader's `void main` function.\n   * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\n   *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\n   *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\n   *        want those to apply to your changes use `fragmentColorTransform` instead.\n   * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\n   *        output value. Will be injected near the end of the `void main` function, but before any\n   *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\n   *        `fragmentMainOutro`.\n   * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\n   *        for performing custom rewrites of the full shader code. Useful if you need to do something\n   *        special that's not covered by the other builtin options. This function will be executed before\n   *        any other transforms are applied.\n   *\n   * @return {THREE.Material}\n   *\n   * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\n   * which can be called to get a variant of the derived material for use in shadow casting. If the\n   * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\n   * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\n   * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\n   * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\n   * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\n   * scenarios, e.g. skipping antialiasing or expensive shader logic.\n   */\n  function createDerivedMaterial(baseMaterial, options) {\n    // First check the cache to see if we've already derived from this baseMaterial using\n    // this unique set of options, and if so just return a clone instead of a new subclass\n    // which is faster and allows their shader program to be shared when rendering.\n    var optionsHash = getOptionsHash(options);\n    var cached = CACHE.get(baseMaterial);\n    if (!cached) {\n      cached = Object.create(null);\n      CACHE.set(baseMaterial, cached);\n    }\n    if (cached[optionsHash]) {\n      return cached[optionsHash].clone()\n    }\n\n    // Even if baseMaterial is changing, use a consistent id in shader rewrites based on the\n    // optionsHash. This makes it more likely that deriving from base materials of the same\n    // type/class, e.g. multiple instances of MeshStandardMaterial, will produce identical\n    // rewritten shader code so they can share a single WebGLProgram behind the scenes.\n    var id = getIdForOptionsHash(optionsHash);\n    var privateDerivedShadersProp = \"_derivedShaders\" + id;\n    var privateBeforeCompileProp = \"_onBeforeCompile\" + id;\n    var distanceMaterialTpl, depthMaterialTpl;\n\n    // Private onBeforeCompile handler that injects the modified shaders and uniforms when\n    // the renderer switches to this material's program\n    function onBeforeCompile(shaderInfo) {\n      baseMaterial.onBeforeCompile.call(this, shaderInfo);\n\n      // Upgrade the shaders, caching the result\n      var ref = this[privateDerivedShadersProp] || (this[privateDerivedShadersProp] = {vertex: {}, fragment: {}});\n      var vertex = ref.vertex;\n      var fragment = ref.fragment;\n      if (vertex.source !== shaderInfo.vertexShader || fragment.source !== shaderInfo.fragmentShader) {\n        var upgraded = upgradeShaders(shaderInfo, options, id);\n        vertex.source = shaderInfo.vertexShader;\n        vertex.result = upgraded.vertexShader;\n        fragment.source = shaderInfo.fragmentShader;\n        fragment.result = upgraded.fragmentShader;\n      }\n\n      // Inject upgraded shaders and uniforms into the program\n      shaderInfo.vertexShader = vertex.result;\n      shaderInfo.fragmentShader = fragment.result;\n      assign(shaderInfo.uniforms, this.uniforms);\n\n      // Inject auto-updating time uniform if requested\n      if (options.timeUniform) {\n        shaderInfo.uniforms[options.timeUniform] = {\n          get value() {return Date.now() - epoch}\n        };\n      }\n\n      // Users can still add their own handlers on top of ours\n      if (this[privateBeforeCompileProp]) {\n        this[privateBeforeCompileProp](shaderInfo);\n      }\n    }\n\n    function DerivedMaterial() {\n      baseMaterial.constructor.apply(this, arguments);\n      this._listeners = undefined; //don't inherit EventDispatcher listeners\n    }\n    DerivedMaterial.prototype = Object.create(baseMaterial, {\n      constructor: {value: DerivedMaterial},\n      isDerivedMaterial: {value: true},\n      baseMaterial: {value: baseMaterial},\n\n      onBeforeCompile: {\n        get: function get() {\n          return onBeforeCompile\n        },\n        set: function set(fn) {\n          this[privateBeforeCompileProp] = fn;\n        }\n      },\n\n      copy: {\n        value: function (source) {\n          baseMaterial.copy.call(this, source);\n          if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\n            this.extensions = assign({}, source.extensions);\n            this.defines = assign({}, source.defines);\n            this.uniforms = three.UniformsUtils.clone(source.uniforms);\n          }\n          return this\n        }\n      },\n\n      /**\n       * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\n       * transformations and discarded fragments.\n       */\n      getDepthMaterial: {value: function() {\n        var depthMaterial = this._depthMaterial;\n        if (!depthMaterial) {\n          if (!depthMaterialTpl) {\n            depthMaterialTpl = createDerivedMaterial(\n              baseMaterial.isDerivedMaterial\n                ? baseMaterial.getDepthMaterial()\n                : new three.MeshDepthMaterial({depthPacking: three.RGBADepthPacking}),\n              options\n            );\n            depthMaterialTpl.defines.IS_DEPTH_MATERIAL = '';\n          }\n          depthMaterial = this._depthMaterial = depthMaterialTpl.clone();\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n        return depthMaterial\n      }},\n\n      /**\n       * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\n       * transformations and discarded fragments.\n       */\n      getDistanceMaterial: {value: function() {\n        var distanceMaterial = this._distanceMaterial;\n        if (!distanceMaterial) {\n          if (!distanceMaterialTpl) {\n            distanceMaterialTpl = createDerivedMaterial(\n              baseMaterial.isDerivedMaterial\n                ? baseMaterial.getDistanceMaterial()\n                : new three.MeshDistanceMaterial(),\n              options\n            );\n            distanceMaterialTpl.defines.IS_DISTANCE_MATERIAL = '';\n          }\n          distanceMaterial = this._distanceMaterial = distanceMaterialTpl.clone();\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n        return distanceMaterial\n      }},\n\n      dispose: {value: function value() {\n        var ref = this;\n        var _depthMaterial = ref._depthMaterial;\n        var _distanceMaterial = ref._distanceMaterial;\n        if (_depthMaterial) { _depthMaterial.dispose(); }\n        if (_distanceMaterial) { _distanceMaterial.dispose(); }\n        baseMaterial.dispose.call(this);\n      }}\n    });\n\n    var material = new DerivedMaterial();\n    material.copy(baseMaterial);\n\n    // Merge uniforms, defines, and extensions\n    material.uniforms = assign(three.UniformsUtils.clone(baseMaterial.uniforms || {}), options.uniforms);\n    material.defines = assign({}, baseMaterial.defines, options.defines);\n    material.defines.TROIKA_DERIVED_MATERIAL = id; //force a program change from the base material\n    material.extensions = assign({}, baseMaterial.extensions, options.extensions);\n\n    cached[optionsHash] = material;\n    return material.clone() //return a clone so changes made to it don't affect the cached object\n  }\n\n\n  function upgradeShaders(ref, options, id) {\n    var vertexShader = ref.vertexShader;\n    var fragmentShader = ref.fragmentShader;\n\n    var vertexDefs = options.vertexDefs;\n    var vertexMainIntro = options.vertexMainIntro;\n    var vertexMainOutro = options.vertexMainOutro;\n    var vertexTransform = options.vertexTransform;\n    var fragmentDefs = options.fragmentDefs;\n    var fragmentMainIntro = options.fragmentMainIntro;\n    var fragmentMainOutro = options.fragmentMainOutro;\n    var fragmentColorTransform = options.fragmentColorTransform;\n    var customRewriter = options.customRewriter;\n    var timeUniform = options.timeUniform;\n\n    vertexDefs = vertexDefs || '';\n    vertexMainIntro = vertexMainIntro || '';\n    vertexMainOutro = vertexMainOutro || '';\n    fragmentDefs = fragmentDefs || '';\n    fragmentMainIntro = fragmentMainIntro || '';\n    fragmentMainOutro = fragmentMainOutro || '';\n\n    // Expand includes if needed\n    if (vertexTransform || customRewriter) {\n      vertexShader = expandShaderIncludes(vertexShader);\n    }\n    if (fragmentColorTransform || customRewriter) {\n      // We need to be able to find postprocessing chunks after include expansion in order to\n      // put them after the fragmentColorTransform, so mark them with comments first. Even if\n      // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\n      // so we still mark them.\n      fragmentShader = fragmentShader.replace(\n        /^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,\n        '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n'\n      );\n      fragmentShader = expandShaderIncludes(fragmentShader);\n    }\n\n    // Apply custom rewriter function\n    if (customRewriter) {\n      var res = customRewriter({vertexShader: vertexShader, fragmentShader: fragmentShader});\n      vertexShader = res.vertexShader;\n      fragmentShader = res.fragmentShader;\n    }\n\n    // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\n    // those and re-insert them into the outro in the correct place:\n    if (fragmentColorTransform) {\n      var postChunks = [];\n      fragmentShader = fragmentShader.replace(\n        /^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\n        function (match) {\n          postChunks.push(match);\n          return ''\n        }\n      );\n      fragmentMainOutro = fragmentColorTransform + \"\\n\" + (postChunks.join('\\n')) + \"\\n\" + fragmentMainOutro;\n    }\n\n    // Inject auto-updating time uniform if requested\n    if (timeUniform) {\n      var code = \"\\nuniform float \" + timeUniform + \";\\n\";\n      vertexDefs = code + vertexDefs;\n      fragmentDefs = code + fragmentDefs;\n    }\n\n    // Inject a function for the vertexTransform and rename all usages of position/normal/uv\n    if (vertexTransform) {\n      vertexDefs = vertexDefs + \"\\nvec3 troika_position_\" + id + \";\\nvec3 troika_normal_\" + id + \";\\nvec2 troika_uv_\" + id + \";\\nvoid troikaVertexTransform\" + id + \"(inout vec3 position, inout vec3 normal, inout vec2 uv) {\\n  \" + vertexTransform + \"\\n}\\n\";\n      vertexMainIntro = \"\\ntroika_position_\" + id + \" = vec3(position);\\ntroika_normal_\" + id + \" = vec3(normal);\\ntroika_uv_\" + id + \" = vec2(uv);\\ntroikaVertexTransform\" + id + \"(troika_position_\" + id + \", troika_normal_\" + id + \", troika_uv_\" + id + \");\\n\" + vertexMainIntro + \"\\n\";\n      vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, function (match, match1, index, fullStr) {\n        return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : (\"troika_\" + match1 + \"_\" + id)\n      });\n    }\n\n    // Inject defs and intro/outro snippets\n    vertexShader = injectIntoShaderCode(vertexShader, id, vertexDefs, vertexMainIntro, vertexMainOutro);\n    fragmentShader = injectIntoShaderCode(fragmentShader, id, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\n\n    return {\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    }\n  }\n\n  function injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\n    if (intro || outro || defs) {\n      shaderCode = shaderCode.replace(voidMainRegExp, (\"\\n\" + defs + \"\\nvoid troikaOrigMain\" + id + \"() {\")\n      );\n      shaderCode += \"\\nvoid main() {\\n  \" + intro + \"\\n  troikaOrigMain\" + id + \"();\\n  \" + outro + \"\\n}\";\n    }\n    return shaderCode\n  }\n\n  function getOptionsHash(options) {\n    return JSON.stringify(options, optionsJsonReplacer)\n  }\n\n  function optionsJsonReplacer(key, value) {\n    return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value\n  }\n\n  var _idCtr = 0;\n  var optionsHashesToIds = new Map();\n  function getIdForOptionsHash(optionsHash) {\n    var id = optionsHashesToIds.get(optionsHash);\n    if (id == null) {\n      optionsHashesToIds.set(optionsHash, (id = ++_idCtr));\n    }\n    return id\n  }\n\n  // Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\n  // TODO how can we keep this from getting stale?\n  var MATERIAL_TYPES_TO_SHADERS = {\n    MeshDepthMaterial: 'depth',\n    MeshDistanceMaterial: 'distanceRGBA',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'phong',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    MeshMatcapMaterial: 'matcap',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points',\n    ShadowMaterial: 'shadow',\n    SpriteMaterial: 'sprite'\n  };\n\n  /**\n   * Given a Three.js `Material` instance, find the shaders/uniforms that will be\n   * used to render that material.\n   *\n   * @param material - the Material instance\n   * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\n   */\n  function getShadersForMaterial(material) {\n    var builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\n    return builtinType ? three.ShaderLib[builtinType] : material //TODO fallback for unknown type?\n  }\n\n  /**\n   * Find all uniforms and their types within a shader code string.\n   *\n   * @param {string} shader - The shader code to parse\n   * @return {object} mapping of uniform names to their glsl type\n   */\n  function getShaderUniformTypes(shader) {\n    var uniformRE = /\\buniform\\s+(int|float|vec[234])\\s+([A-Za-z_][\\w]*)/g;\n    var uniforms = Object.create(null);\n    var match;\n    while ((match = uniformRE.exec(shader)) !== null) {\n      uniforms[match[2]] = match[1];\n    }\n    return uniforms\n  }\n\n  /**\n   * @class ShaderFloatArray\n   *\n   * When writing a custom WebGL shader, sometimes you need to pass it an array of floating\n   * point numbers that it can read from. Unfortunately this is very difficult to do in WebGL,\n   * because:\n   *\n   *   - GLSL \"array\" uniforms can only be of a constant length.\n   *   - Textures can only hold floating point numbers in WebGL1 if the `OES_texture_float`\n   *     extension is available.\n   *\n   * ShaderFloatArray is an array-like abstraction that encodes its floating point data into\n   * an RGBA texture's four Uint8 components, and provides the corresponding ThreeJS uniforms\n   * and GLSL code for you to put in your custom shader to query the float values by array index.\n   *\n   * This should generally only be used within a fragment shader, as some environments (e.g. iOS)\n   * only allow texture lookups in fragment shaders.\n   *\n   * TODO:\n   *   - Fix texture to fill both dimensions so we don't easily hit max texture size limits\n   *   - Use a float texture if the extension is available so we can skip the encoding process\n   */\n  var ShaderFloatArray = function ShaderFloatArray(name) {\n    this.name = name;\n    this.textureUniform = \"dataTex_\" + name;\n    this.textureSizeUniform = \"dataTexSize_\" + name;\n    this.multiplierUniform = \"dataMultiplier_\" + name;\n\n    /**\n     * @property dataSizeUniform - the name of the GLSL uniform that will hold the\n     * length of the data array.\n     * @type {string}\n     */\n    this.dataSizeUniform = \"dataSize_\" + name;\n\n    /**\n     * @property readFunction - the name of the GLSL function that should be called to\n     * read data out of the array by index.\n     * @type {string}\n     */\n    this.readFunction = \"readData_\" + name;\n\n    this._raw = new Float32Array(0);\n    this._texture = new three.DataTexture(new Uint8Array(0), 0, 1);\n    this._length = 0;\n    this._multiplier = 1;\n  };\n\n  var prototypeAccessors = { length: { configurable: true } };\n\n  /**\n   * @property length - the current length of the data array\n   * @type {number}\n   */\n  prototypeAccessors.length.set = function (value) {\n    if (value !== this._length) {\n      // Find nearest power-of-2 that holds the new length\n      var size = Math.pow(2, Math.ceil(Math.log2(value)));\n      var raw = this._raw;\n      if (size < raw.length) {\n        this._raw = raw.subarray(0, size);\n      }\n      else if(size > raw.length) {\n        this._raw = new Float32Array(size);\n        this._raw.set(raw);\n      }\n      this._length = value;\n    }\n  };\n  prototypeAccessors.length.get = function () {\n    return this._length\n  };\n\n  /**\n   * Add a value to the end of the data array\n   * @param {number} value\n   */\n  ShaderFloatArray.prototype.push = function push (value) {\n    return this.set(this.length++, value)\n  };\n\n  /**\n   * Replace the existing data with that from a new array\n   * @param {ArrayLike<number>} array\n   */\n  ShaderFloatArray.prototype.setArray = function setArray (array) {\n    this.length = array.length;\n    this._raw.set(array);\n    this._needsRepack = true;\n  };\n\n  /**\n   * Get the current value at index\n   * @param {number} index\n   * @return {number}\n   */\n  ShaderFloatArray.prototype.get = function get (index) {\n    return this._raw[index]\n  };\n\n  ShaderFloatArray.prototype.set = function set (index, value) {\n    if (index + 1 > this._length) {\n      this.length = index + 1;\n    }\n    if (value !== this._raw[index]) {\n      this._raw[index] = value;\n      encodeFloatToFourInts(\n        value / this._multiplier,\n        this._texture.image.data,\n        index * 4\n      );\n      this._needsMultCheck = true;\n    }\n  };\n\n  /**\n   * Make a copy of this ShaderFloatArray\n   * @return {ShaderFloatArray}\n   */\n  ShaderFloatArray.prototype.clone = function clone () {\n    var clone = new ShaderFloatArray(this.name);\n    clone.setArray(this._raw);\n    return clone\n  };\n\n  /**\n   * Retrieve the set of Uniforms that must to be added to the target ShaderMaterial or\n   * DerivedMaterial, to feed the GLSL code generated by {@link #getShaderHeaderCode}.\n   * @return {Object}\n   */\n  ShaderFloatArray.prototype.getShaderUniforms = function getShaderUniforms () {\n      var obj;\n\n    var me = this;\n    return ( obj = {}, obj[this.textureUniform] = {get value() {\n        me._sync();\n        return me._texture\n      }}, obj[this.textureSizeUniform] = {get value() {\n        me._sync();\n        return me._texture.image.width\n      }}, obj[this.dataSizeUniform] = {get value() {\n        me._sync();\n        return me.length\n      }}, obj[this.multiplierUniform] = {get value() {\n        me._sync();\n        return me._multiplier\n      }}, obj )\n  };\n\n  /**\n   * Retrieve the GLSL code that must be injected into the shader's definitions area to\n   * enable reading from the data array. This exposes a function with a name matching\n   * the {@link #readFunction} property, which other shader code can call to read values\n   * from the array by their index.\n   * @return {string}\n   */\n  ShaderFloatArray.prototype.getShaderHeaderCode = function getShaderHeaderCode () {\n    var ref = this;\n      var textureUniform = ref.textureUniform;\n      var textureSizeUniform = ref.textureSizeUniform;\n      var dataSizeUniform = ref.dataSizeUniform;\n      var multiplierUniform = ref.multiplierUniform;\n      var readFunction = ref.readFunction;\n    return (\"\\nuniform sampler2D \" + textureUniform + \";\\nuniform float \" + textureSizeUniform + \";\\nuniform float \" + dataSizeUniform + \";\\nuniform float \" + multiplierUniform + \";\\n\\nfloat \" + readFunction + \"(float index) {\\n  vec2 texUV = vec2((index + 0.5) / \" + textureSizeUniform + \", 0.5);\\n  vec4 pixel = texture2D(\" + textureUniform + \", texUV);\\n  return dot(pixel, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0)) * \" + multiplierUniform + \";\\n}\\n\")\n  };\n\n  /**\n   * @private Synchronize any pending changes to the underlying DataTexture\n   */\n  ShaderFloatArray.prototype._sync = function _sync () {\n    var tex = this._texture;\n    var raw = this._raw;\n    var needsRepack = this._needsRepack;\n\n    // If the size of the raw array changed, resize the texture to match\n    if (raw.length !== tex.image.width) {\n      tex.image = {\n        data: new Uint8Array(raw.length * 4),\n        width: raw.length,\n        height: 1\n      };\n      needsRepack = true;\n    }\n\n    // If the values changed, check the multiplier. This should be a value by which\n    // all the values are divided to constrain them to the [0,1] range required by\n    // the Uint8 packing algorithm. We pick the nearest power of 2 that holds the\n    // maximum value for greatest accuracy.\n    if (needsRepack || this._needsMultCheck) {\n      var maxVal = this._raw.reduce(function (a, b) { return Math.max(a, b); }, 0);\n      var mult = Math.pow(2, Math.ceil(Math.log2(maxVal)));\n      if (mult !== this._multiplier) {\n        this._multiplier = mult;\n        needsRepack = true;\n      }\n      tex.needsUpdate = true;\n      this._needsMultCheck = false;\n    }\n\n    // If things changed in a way we need to repack, do so\n    if (needsRepack) {\n      for (var i = 0, len = raw.length, mult$1 = this._multiplier; i < len; i++) {\n        encodeFloatToFourInts(raw[i] / mult$1, tex.image.data, i * 4);\n      }\n      this._needsRepack = false;\n    }\n  };\n\n  Object.defineProperties( ShaderFloatArray.prototype, prototypeAccessors );\n\n\n\n  /**\n   * Encode a floating point number into a set of four 8-bit integers.\n   * Also see the companion decoder function #decodeFloatFromFourInts.\n   *\n   * This is adapted to JavaScript from the basic approach at\n   * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n   * but writes out integers in the range 0-255 instead of floats in the range 0-1\n   * so they can be more easily used in a Uint8Array for standard WebGL rgba textures.\n   *\n   * Some precision will necessarily be lost during the encoding and decoding process.\n   * Testing shows that the maximum precision error is ~1.18e-10 which should be good\n   * enough for most cases.\n   *\n   * @param {Number} value - the floating point number to encode. Must be in the range [0, 1]\n   *        otherwise the results will be incorrect.\n   * @param {Array|Uint8Array} array - an array into which the four ints should be written\n   * @param {Number} startIndex - index in the output array at which to start writing the ints\n   * @return {Array|Uint8Array}\n   */\n  function encodeFloatToFourInts(value, array, startIndex) {\n    // This is adapted to JS from the basic approach at\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n    // but writes to a Uint8Array instead of floats. Input values must be in\n    // the range [0, 1]. The maximum error after encoding and decoding is ~1.18e-10\n    var enc0 = 255 * value;\n    var enc1 = 255 * (enc0 % 1);\n    var enc2 = 255 * (enc1 % 1);\n    var enc3 = 255 * (enc2 % 1);\n\n    enc0 = enc0 & 255;\n    enc1 = enc1 & 255;\n    enc2 = enc2 & 255;\n    enc3 = Math.round(enc3) & 255;\n\n    array[startIndex] = enc0;\n    array[startIndex + 1] = enc1;\n    array[startIndex + 2] = enc2;\n    array[startIndex + 3] = enc3;\n    return array\n  }\n\n  /*\n  Input geometry is a cylinder with r=1, height in y dimension from 0 to 1,\n  divided into a reasonable number of height segments.\n  */\n\n  var vertexDefs = \"\\nuniform vec3 pointA;\\nuniform vec3 controlA;\\nuniform vec3 controlB;\\nuniform vec3 pointB;\\nuniform float radius;\\nvarying float bezierT;\\n\\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  float b0 = t2 * t2 * t2;\\n  float b1 = 3.0 * t * t2 * t2;\\n  float b2 = 3.0 * t * t * t2;\\n  float b3 = t * t * t;\\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\\n}\\n\\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  return -3.0 * p1 * t2 * t2 +\\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\\n    3.0 * p2 * t * t;\\n}\\n\";\n\n  var vertexTransform = \"\\nfloat t = position.y;\\nbezierT = t;\\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\\n\\n// Make \\\"sideways\\\" always perpendicular to the camera ray; this ensures that any twists\\n// in the cylinder occur where you won't see them: \\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\\nif (bezierDir == viewDirection) {\\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\\n}\\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\\nvec3 upish = normalize(cross(sideways, bezierDir));\\n\\n// Build a matrix for transforming this disc in the cylinder:\\nmat4 discTx;\\ndiscTx[0].xyz = sideways * radius;\\ndiscTx[1].xyz = bezierDir * radius;\\ndiscTx[2].xyz = upish * radius;\\ndiscTx[3].xyz = bezierCenterPos;\\ndiscTx[3][3] = 1.0;\\n\\n// Apply transform, ignoring original y\\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\\nnormal = normalize(mat3(discTx) * normal);\\n\";\n\n  var fragmentDefs = \"\\nuniform vec3 dashing;\\nvarying float bezierT;\\n\";\n\n  var fragmentMainIntro = \"\\nif (dashing.x + dashing.y > 0.0) {\\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\\n  if (dashFrac > dashing.x) {\\n    discard;\\n  }\\n}\\n\";\n\n  // Debugging: separate color for each of the 6 sides:\n  // const fragmentColorTransform = `\n  // float sideNum = floor(vUV.x * 6.0);\n  // vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\n  //   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\n  //   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\n  //   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\n  //   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\n  //   vec3(1.0, 0.0, 1.0);\n  // gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\n  // `\n\n\n\n  function createBezierMeshMaterial(baseMaterial) {\n    return createDerivedMaterial(\n      baseMaterial,\n      {\n        uniforms: {\n          pointA: {value: new three.Vector3()},\n          controlA: {value: new three.Vector3()},\n          controlB: {value: new three.Vector3()},\n          pointB: {value: new three.Vector3()},\n          radius: {value: 0.01},\n          dashing: {value: new three.Vector3()} //on, off, offset\n        },\n        vertexDefs: vertexDefs,\n        vertexTransform: vertexTransform,\n        fragmentDefs: fragmentDefs,\n        fragmentMainIntro: fragmentMainIntro\n      }\n    )\n  }\n\n  var geometry = null;\n\n  var defaultBaseMaterial = new three.MeshStandardMaterial({color: 0xffffff, side: three.DoubleSide});\n\n\n  /**\n   * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\n   * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\n   * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\n   * automatically.\n   *\n   * The cubiz bezier path is determined by its four `Vector3` properties:\n   * - `pointA`\n   * - `controlA`\n   * - `controlB`\n   * - `pointB`\n   *\n   * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\n   *\n   * You can also give the tube a dashed appearance with two properties:\n   *\n   * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\n   *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\n   *   used as input to the cubic bezier function, not its visible length.)\n   * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\n   *\n   * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\n   * thicker tubes.\n   *\n   * TODO: proper geometry bounding sphere and raycasting\n   * TODO: allow control of the geometry's segment counts\n   */\n  var BezierMesh = /*@__PURE__*/(function (Mesh) {\n    function BezierMesh() {\n      Mesh.call(\n        this, BezierMesh.getGeometry(),\n        defaultBaseMaterial\n      );\n\n      this.pointA = new three.Vector3();\n      this.controlA = new three.Vector3();\n      this.controlB = new three.Vector3();\n      this.pointB = new three.Vector3();\n      this.radius = 0.01;\n      this.dashArray = new three.Vector2();\n      this.dashOffset = 0;\n\n      // TODO - disabling frustum culling until I figure out how to customize the\n      //  geometry's bounding sphere that gets used\n      this.frustumCulled = false;\n    }\n\n    if ( Mesh ) BezierMesh.__proto__ = Mesh;\n    BezierMesh.prototype = Object.create( Mesh && Mesh.prototype );\n    BezierMesh.prototype.constructor = BezierMesh;\n\n    var prototypeAccessors = { material: { configurable: true },customDepthMaterial: { configurable: true },customDistanceMaterial: { configurable: true } };\n\n    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n    BezierMesh.getGeometry = function getGeometry () {\n      return geometry || (geometry =\n        new three.CylinderBufferGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0)\n      )\n    };\n\n    prototypeAccessors.material.get = function () {\n      var derivedMaterial = this._derivedMaterial;\n      var baseMaterial = this._baseMaterial || defaultBaseMaterial;\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial);\n        // dispose the derived material when its base material is disposed:\n        baseMaterial.addEventListener('dispose', function onDispose() {\n          baseMaterial.removeEventListener('dispose', onDispose);\n          derivedMaterial.dispose();\n        });\n      }\n      return derivedMaterial\n    };\n    prototypeAccessors.material.set = function (baseMaterial) {\n      this._baseMaterial = baseMaterial;\n    };\n\n    // Create and update material for shadows upon request:\n    prototypeAccessors.customDepthMaterial.get = function () {\n      return this.material.getDepthMaterial()\n    };\n    prototypeAccessors.customDistanceMaterial.get = function () {\n      return this.material.getDistanceMaterial()\n    };\n\n    BezierMesh.prototype.onBeforeRender = function onBeforeRender (shaderInfo) {\n      var ref = this.material;\n      var uniforms = ref.uniforms;\n      var ref$1 = this;\n      var pointA = ref$1.pointA;\n      var controlA = ref$1.controlA;\n      var controlB = ref$1.controlB;\n      var pointB = ref$1.pointB;\n      var radius = ref$1.radius;\n      var dashArray = ref$1.dashArray;\n      var dashOffset = ref$1.dashOffset;\n      uniforms.pointA.value.copy(pointA);\n      uniforms.controlA.value.copy(controlA);\n      uniforms.controlB.value.copy(controlB);\n      uniforms.pointB.value.copy(pointB);\n      uniforms.radius.value = radius;\n      uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\n    };\n\n    BezierMesh.prototype.raycast = function raycast (raycaster, intersects) {\n      // TODO - just fail for now\n    };\n\n    Object.defineProperties( BezierMesh.prototype, prototypeAccessors );\n\n    return BezierMesh;\n  }(three.Mesh));\n\n  exports.BezierMesh = BezierMesh;\n  exports.ShaderFloatArray = ShaderFloatArray;\n  exports.createDerivedMaterial = createDerivedMaterial;\n  exports.expandShaderIncludes = expandShaderIncludes;\n  exports.getShaderUniformTypes = getShaderUniformTypes;\n  exports.getShadersForMaterial = getShadersForMaterial;\n  exports.voidMainRegExp = voidMainRegExp;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":221,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":222,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":223,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":224,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":225,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":226,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":227,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":228,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":229,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":230,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":231,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":232,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":233,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":234,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":235,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":236,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":237,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":238,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":239,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":240,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":241,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":242,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":243,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":244,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":245,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":246,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":247,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":248,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":249,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":250,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":251,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":252,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":253,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":254,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":255,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":256,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":257,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":258,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":259,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":260,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":261,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":262,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":263,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":264,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":265,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":266,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":267,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":268,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":269,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":270,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":271,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":272,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":273,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":274,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":275,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":276,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":277,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":278,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":279,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":280,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":281,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":282,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":283,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":284,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":285,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":286,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":287,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":288,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":289,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":290,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":291,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":292,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":293,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":294,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":295,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":296,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":297,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":298,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":299,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":300,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":301,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":302,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":303,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":304,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":305,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":306,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":307,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":308,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":309,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":310,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":311,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":312,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":313,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":314,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":315,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":316,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":317,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":318,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":319,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":320,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":321,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":322,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":323,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":324,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":325,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":326,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":327,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":328,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":329,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":330,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":331,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":332,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":333,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":334,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":335,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":336,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":337,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":338,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":339,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":340,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":341,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":342,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":343,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":344,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":345,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":346,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":347,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":348,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":349,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":350,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":351,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":352,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":353,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":354,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":355,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":356,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":357,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":358,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":359,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":360,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":361,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":362,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":363,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":364,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":365,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":366,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":367,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":368,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":369,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":370,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":371,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":372,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":373,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":374,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":375,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":376,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":377,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":378,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":379,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":380,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":381,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":382,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":383,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":384,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":385,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":386,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":387,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":388,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":389,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":390,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":391,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":392,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":393,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":394,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":395,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":396,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":397,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":398,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":399,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":400,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":401,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":402,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":403,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":404,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":405,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":406,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":407,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":408,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":409,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":410,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":411,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":412,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":413,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":414,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":415,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":416,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":417,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":418,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":419,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":420,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":421,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":422,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":423,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":424,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":425,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":426,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":427,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":428,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":429,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":430,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":431,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":432,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":433,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":434,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":435,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":436,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":437,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":438,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":439,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":440,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":441,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":442,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":443,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":444,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":445,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":446,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":447,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":448,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":449,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":450,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":451,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":452,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":453,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":454,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":455,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":456,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":457,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":458,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":459,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":460,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":461,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":462,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":463,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":464,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":465,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":466,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":467,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":468,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":469,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":470,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":471,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":472,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":473,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":474,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":475,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":476,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":477,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":478,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":479,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":480,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":481,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":482,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":483,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":484,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":485,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":486,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":487,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":488,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":489,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":490,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":491,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":492,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":493,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":494,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":495,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":496,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":497,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":498,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":499,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":500,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":501,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":502,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":503,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":504,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":505,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":506,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":507,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":508,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":509,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":510,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":511,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":512,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":513,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":514,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":515,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":516,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":517,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":518,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":519,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":520,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":521,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":522,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":523,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":524,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":525,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":526,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":527,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":528,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":529,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":530,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":531,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":532,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":533,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":534,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":535,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":536,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":537,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":538,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":539,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":540,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":541,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":542,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":543,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":544,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":545,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":546,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":547,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":548,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":549,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":550,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":551,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":552,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":553,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":554,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":555,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":556,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":557,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":558,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":559,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":560,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":561,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":562,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":563,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":564,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":565,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":566,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":567,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":568,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":569,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":570,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":571,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":572,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":573,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":574,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":575,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":576,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":577,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":578,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":579,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":580,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":581,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":582,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":583,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":584,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":585,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":586,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":587,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":588,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":589,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":590,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":591,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":592,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":593,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":594,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":595,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":596,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":597,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":598,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":599,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":600,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":601,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":602,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":603,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":604,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":605,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":606,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":607,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":608,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":609,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":610,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":611,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":612,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":613,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":614,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":615,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":616,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":617,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":618,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":619,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":620,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":621,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":622,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":623,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":624,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":625,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":626,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":627,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":628,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":629,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":630,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":631,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":632,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":633,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":634,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":635,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":636,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":637,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":638,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":639,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":640,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":641,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":642,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":643,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":644,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":645,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":646,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":647,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":648,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":649,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":650,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":651,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":652,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":653,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":654,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":655,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":656,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":657,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":658,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":659,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":660,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":661,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":662,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":663,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":664,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":665,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":666,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":667,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":668,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":669,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":670,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":671,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":672,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":673,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":674,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":675,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":676,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":677,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":678,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":679,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":680,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":681,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":682,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":683,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":684,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":685,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":686,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":687,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":688,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":689,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":690,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":691,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":692,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":693,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":694,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":695,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":696,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":697,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":698,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":699,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":700,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":701,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":702,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":703,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":704,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":705,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":706,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":707,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":708,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":709,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":710,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":711,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":712,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":713,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":714,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":715,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":716,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":717,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":718,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":719,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":720,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":721,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":722,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":723,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":724,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":725,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":726,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":727,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":728,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":729,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":730,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":731,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":732,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":733,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":734,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":735,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":736,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":737,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":738,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":739,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":740,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":741,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":742,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":743,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":744,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":745,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":746,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":747,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":748,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":749,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":750,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":751,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":752,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":753,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":754,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":755,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":756,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":757,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":758,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":759,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":760,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":761,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":762,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":763,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":764,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":765,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":766,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":767,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":768,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":769,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":770,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":771,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":772,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":773,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":774,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":775,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":776,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":777,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":778,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":779,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":780,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":781,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":782,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":783,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":784,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":785,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":786,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":787,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":788,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":789,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":790,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":791,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":792,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":793,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":794,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":795,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":796,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":797,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":798,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":799,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":800,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":801,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":802,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":803,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":804,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":805,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":806,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":807,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":808,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":809,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":810,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":811,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":812,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":813,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":814,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":815,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":816,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":817,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":818,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":819,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":820,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":821,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":822,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":823,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":824,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":825,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":826,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":827,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":828,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":829,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":830,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":831,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":832,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":833,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":834,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":835,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":836,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":837,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":838,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":839,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":840,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":841,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":842,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":843,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":844,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":845,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":846,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":847,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":848,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":849,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":850,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":851,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/troika-three-utils/dist/troika-three-utils.umd.js","original":{"line":852,"column":0},"generated":{"line":854,"column":0}}],"sources":{"node_modules/troika-three-utils/dist/troika-three-utils.umd.js":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('three')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'three'], factory) :\n  (global = global || self, factory(global.troika_three_utils = {}, global.THREE));\n}(this, (function (exports, three) { 'use strict';\n\n  /**\n   * Regular expression for matching the `void main() {` opener line in GLSL.\n   * @type {RegExp}\n   */\n  var voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n\n  /**\n   * Recursively expands all `#include <xyz>` statements within string of shader code.\n   * Copied from three's WebGLProgram#parseIncludes for external use.\n   *\n   * @param {string} source - The GLSL source code to evaluate\n   * @return {string} The GLSL code with all includes expanded\n   */\n  function expandShaderIncludes( source ) {\n    var pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n    function replace(match, include) {\n      var chunk = three.ShaderChunk[include];\n      return chunk ? expandShaderIncludes(chunk) : match\n    }\n    return source.replace( pattern, replace )\n  }\n\n  // Local assign polyfill to avoid importing troika-core\n  var assign = Object.assign || function(/*target, ...sources*/) {\n    var arguments$1 = arguments;\n\n    var target = arguments[0];\n    for (var i = 1, len = arguments.length; i < len; i++) {\n      var source = arguments$1[i];\n      if (source) {\n        for (var prop in source) {\n          if (source.hasOwnProperty(prop)) {\n            target[prop] = source[prop];\n          }\n        }\n      }\n    }\n    return target\n  };\n\n\n  var epoch = Date.now();\n  var CACHE = new WeakMap(); //threejs requires WeakMap internally so should be safe to assume support\n\n\n  /**\n   * A utility for creating a custom shader material derived from another material's\n   * shaders. This allows you to inject custom shader logic and transforms into the\n   * builtin ThreeJS materials without having to recreate them from scratch.\n   *\n   * @param {THREE.Material} baseMaterial - the original material to derive from\n   *\n   * @param {Object} options - How the base material should be modified.\n   * @param {Object} options.defines - Custom `defines` for the material\n   * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\n   * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\n   *        be accessed and manipulated via the resulting material's `uniforms` property, just like\n   *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\n   * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\n   *        both shaders, and it will automatically be updated on each render frame with a number of\n   *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\n   *        true calendar time.\n   * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\n   *        definitions, above the `void main()` function.\n   * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\n   *        shader's `void main` function.\n   * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\n   *        shader's `void main` function.\n   * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\n   *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\n   *        those attributes exposed by their normal names as read/write values.\n   * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\n   *        definitions, above the `void main()` function.\n   * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\n   *        shader's `void main` function.\n   * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\n   *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\n   *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\n   *        want those to apply to your changes use `fragmentColorTransform` instead.\n   * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\n   *        output value. Will be injected near the end of the `void main` function, but before any\n   *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\n   *        `fragmentMainOutro`.\n   * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\n   *        for performing custom rewrites of the full shader code. Useful if you need to do something\n   *        special that's not covered by the other builtin options. This function will be executed before\n   *        any other transforms are applied.\n   *\n   * @return {THREE.Material}\n   *\n   * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\n   * which can be called to get a variant of the derived material for use in shadow casting. If the\n   * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\n   * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\n   * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\n   * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\n   * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\n   * scenarios, e.g. skipping antialiasing or expensive shader logic.\n   */\n  function createDerivedMaterial(baseMaterial, options) {\n    // First check the cache to see if we've already derived from this baseMaterial using\n    // this unique set of options, and if so just return a clone instead of a new subclass\n    // which is faster and allows their shader program to be shared when rendering.\n    var optionsHash = getOptionsHash(options);\n    var cached = CACHE.get(baseMaterial);\n    if (!cached) {\n      cached = Object.create(null);\n      CACHE.set(baseMaterial, cached);\n    }\n    if (cached[optionsHash]) {\n      return cached[optionsHash].clone()\n    }\n\n    // Even if baseMaterial is changing, use a consistent id in shader rewrites based on the\n    // optionsHash. This makes it more likely that deriving from base materials of the same\n    // type/class, e.g. multiple instances of MeshStandardMaterial, will produce identical\n    // rewritten shader code so they can share a single WebGLProgram behind the scenes.\n    var id = getIdForOptionsHash(optionsHash);\n    var privateDerivedShadersProp = \"_derivedShaders\" + id;\n    var privateBeforeCompileProp = \"_onBeforeCompile\" + id;\n    var distanceMaterialTpl, depthMaterialTpl;\n\n    // Private onBeforeCompile handler that injects the modified shaders and uniforms when\n    // the renderer switches to this material's program\n    function onBeforeCompile(shaderInfo) {\n      baseMaterial.onBeforeCompile.call(this, shaderInfo);\n\n      // Upgrade the shaders, caching the result\n      var ref = this[privateDerivedShadersProp] || (this[privateDerivedShadersProp] = {vertex: {}, fragment: {}});\n      var vertex = ref.vertex;\n      var fragment = ref.fragment;\n      if (vertex.source !== shaderInfo.vertexShader || fragment.source !== shaderInfo.fragmentShader) {\n        var upgraded = upgradeShaders(shaderInfo, options, id);\n        vertex.source = shaderInfo.vertexShader;\n        vertex.result = upgraded.vertexShader;\n        fragment.source = shaderInfo.fragmentShader;\n        fragment.result = upgraded.fragmentShader;\n      }\n\n      // Inject upgraded shaders and uniforms into the program\n      shaderInfo.vertexShader = vertex.result;\n      shaderInfo.fragmentShader = fragment.result;\n      assign(shaderInfo.uniforms, this.uniforms);\n\n      // Inject auto-updating time uniform if requested\n      if (options.timeUniform) {\n        shaderInfo.uniforms[options.timeUniform] = {\n          get value() {return Date.now() - epoch}\n        };\n      }\n\n      // Users can still add their own handlers on top of ours\n      if (this[privateBeforeCompileProp]) {\n        this[privateBeforeCompileProp](shaderInfo);\n      }\n    }\n\n    function DerivedMaterial() {\n      baseMaterial.constructor.apply(this, arguments);\n      this._listeners = undefined; //don't inherit EventDispatcher listeners\n    }\n    DerivedMaterial.prototype = Object.create(baseMaterial, {\n      constructor: {value: DerivedMaterial},\n      isDerivedMaterial: {value: true},\n      baseMaterial: {value: baseMaterial},\n\n      onBeforeCompile: {\n        get: function get() {\n          return onBeforeCompile\n        },\n        set: function set(fn) {\n          this[privateBeforeCompileProp] = fn;\n        }\n      },\n\n      copy: {\n        value: function (source) {\n          baseMaterial.copy.call(this, source);\n          if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\n            this.extensions = assign({}, source.extensions);\n            this.defines = assign({}, source.defines);\n            this.uniforms = three.UniformsUtils.clone(source.uniforms);\n          }\n          return this\n        }\n      },\n\n      /**\n       * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\n       * transformations and discarded fragments.\n       */\n      getDepthMaterial: {value: function() {\n        var depthMaterial = this._depthMaterial;\n        if (!depthMaterial) {\n          if (!depthMaterialTpl) {\n            depthMaterialTpl = createDerivedMaterial(\n              baseMaterial.isDerivedMaterial\n                ? baseMaterial.getDepthMaterial()\n                : new three.MeshDepthMaterial({depthPacking: three.RGBADepthPacking}),\n              options\n            );\n            depthMaterialTpl.defines.IS_DEPTH_MATERIAL = '';\n          }\n          depthMaterial = this._depthMaterial = depthMaterialTpl.clone();\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n        return depthMaterial\n      }},\n\n      /**\n       * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\n       * transformations and discarded fragments.\n       */\n      getDistanceMaterial: {value: function() {\n        var distanceMaterial = this._distanceMaterial;\n        if (!distanceMaterial) {\n          if (!distanceMaterialTpl) {\n            distanceMaterialTpl = createDerivedMaterial(\n              baseMaterial.isDerivedMaterial\n                ? baseMaterial.getDistanceMaterial()\n                : new three.MeshDistanceMaterial(),\n              options\n            );\n            distanceMaterialTpl.defines.IS_DISTANCE_MATERIAL = '';\n          }\n          distanceMaterial = this._distanceMaterial = distanceMaterialTpl.clone();\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n        return distanceMaterial\n      }},\n\n      dispose: {value: function value() {\n        var ref = this;\n        var _depthMaterial = ref._depthMaterial;\n        var _distanceMaterial = ref._distanceMaterial;\n        if (_depthMaterial) { _depthMaterial.dispose(); }\n        if (_distanceMaterial) { _distanceMaterial.dispose(); }\n        baseMaterial.dispose.call(this);\n      }}\n    });\n\n    var material = new DerivedMaterial();\n    material.copy(baseMaterial);\n\n    // Merge uniforms, defines, and extensions\n    material.uniforms = assign(three.UniformsUtils.clone(baseMaterial.uniforms || {}), options.uniforms);\n    material.defines = assign({}, baseMaterial.defines, options.defines);\n    material.defines.TROIKA_DERIVED_MATERIAL = id; //force a program change from the base material\n    material.extensions = assign({}, baseMaterial.extensions, options.extensions);\n\n    cached[optionsHash] = material;\n    return material.clone() //return a clone so changes made to it don't affect the cached object\n  }\n\n\n  function upgradeShaders(ref, options, id) {\n    var vertexShader = ref.vertexShader;\n    var fragmentShader = ref.fragmentShader;\n\n    var vertexDefs = options.vertexDefs;\n    var vertexMainIntro = options.vertexMainIntro;\n    var vertexMainOutro = options.vertexMainOutro;\n    var vertexTransform = options.vertexTransform;\n    var fragmentDefs = options.fragmentDefs;\n    var fragmentMainIntro = options.fragmentMainIntro;\n    var fragmentMainOutro = options.fragmentMainOutro;\n    var fragmentColorTransform = options.fragmentColorTransform;\n    var customRewriter = options.customRewriter;\n    var timeUniform = options.timeUniform;\n\n    vertexDefs = vertexDefs || '';\n    vertexMainIntro = vertexMainIntro || '';\n    vertexMainOutro = vertexMainOutro || '';\n    fragmentDefs = fragmentDefs || '';\n    fragmentMainIntro = fragmentMainIntro || '';\n    fragmentMainOutro = fragmentMainOutro || '';\n\n    // Expand includes if needed\n    if (vertexTransform || customRewriter) {\n      vertexShader = expandShaderIncludes(vertexShader);\n    }\n    if (fragmentColorTransform || customRewriter) {\n      // We need to be able to find postprocessing chunks after include expansion in order to\n      // put them after the fragmentColorTransform, so mark them with comments first. Even if\n      // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\n      // so we still mark them.\n      fragmentShader = fragmentShader.replace(\n        /^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,\n        '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n'\n      );\n      fragmentShader = expandShaderIncludes(fragmentShader);\n    }\n\n    // Apply custom rewriter function\n    if (customRewriter) {\n      var res = customRewriter({vertexShader: vertexShader, fragmentShader: fragmentShader});\n      vertexShader = res.vertexShader;\n      fragmentShader = res.fragmentShader;\n    }\n\n    // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\n    // those and re-insert them into the outro in the correct place:\n    if (fragmentColorTransform) {\n      var postChunks = [];\n      fragmentShader = fragmentShader.replace(\n        /^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\n        function (match) {\n          postChunks.push(match);\n          return ''\n        }\n      );\n      fragmentMainOutro = fragmentColorTransform + \"\\n\" + (postChunks.join('\\n')) + \"\\n\" + fragmentMainOutro;\n    }\n\n    // Inject auto-updating time uniform if requested\n    if (timeUniform) {\n      var code = \"\\nuniform float \" + timeUniform + \";\\n\";\n      vertexDefs = code + vertexDefs;\n      fragmentDefs = code + fragmentDefs;\n    }\n\n    // Inject a function for the vertexTransform and rename all usages of position/normal/uv\n    if (vertexTransform) {\n      vertexDefs = vertexDefs + \"\\nvec3 troika_position_\" + id + \";\\nvec3 troika_normal_\" + id + \";\\nvec2 troika_uv_\" + id + \";\\nvoid troikaVertexTransform\" + id + \"(inout vec3 position, inout vec3 normal, inout vec2 uv) {\\n  \" + vertexTransform + \"\\n}\\n\";\n      vertexMainIntro = \"\\ntroika_position_\" + id + \" = vec3(position);\\ntroika_normal_\" + id + \" = vec3(normal);\\ntroika_uv_\" + id + \" = vec2(uv);\\ntroikaVertexTransform\" + id + \"(troika_position_\" + id + \", troika_normal_\" + id + \", troika_uv_\" + id + \");\\n\" + vertexMainIntro + \"\\n\";\n      vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, function (match, match1, index, fullStr) {\n        return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : (\"troika_\" + match1 + \"_\" + id)\n      });\n    }\n\n    // Inject defs and intro/outro snippets\n    vertexShader = injectIntoShaderCode(vertexShader, id, vertexDefs, vertexMainIntro, vertexMainOutro);\n    fragmentShader = injectIntoShaderCode(fragmentShader, id, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\n\n    return {\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    }\n  }\n\n  function injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\n    if (intro || outro || defs) {\n      shaderCode = shaderCode.replace(voidMainRegExp, (\"\\n\" + defs + \"\\nvoid troikaOrigMain\" + id + \"() {\")\n      );\n      shaderCode += \"\\nvoid main() {\\n  \" + intro + \"\\n  troikaOrigMain\" + id + \"();\\n  \" + outro + \"\\n}\";\n    }\n    return shaderCode\n  }\n\n  function getOptionsHash(options) {\n    return JSON.stringify(options, optionsJsonReplacer)\n  }\n\n  function optionsJsonReplacer(key, value) {\n    return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value\n  }\n\n  var _idCtr = 0;\n  var optionsHashesToIds = new Map();\n  function getIdForOptionsHash(optionsHash) {\n    var id = optionsHashesToIds.get(optionsHash);\n    if (id == null) {\n      optionsHashesToIds.set(optionsHash, (id = ++_idCtr));\n    }\n    return id\n  }\n\n  // Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\n  // TODO how can we keep this from getting stale?\n  var MATERIAL_TYPES_TO_SHADERS = {\n    MeshDepthMaterial: 'depth',\n    MeshDistanceMaterial: 'distanceRGBA',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'phong',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    MeshMatcapMaterial: 'matcap',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points',\n    ShadowMaterial: 'shadow',\n    SpriteMaterial: 'sprite'\n  };\n\n  /**\n   * Given a Three.js `Material` instance, find the shaders/uniforms that will be\n   * used to render that material.\n   *\n   * @param material - the Material instance\n   * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\n   */\n  function getShadersForMaterial(material) {\n    var builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\n    return builtinType ? three.ShaderLib[builtinType] : material //TODO fallback for unknown type?\n  }\n\n  /**\n   * Find all uniforms and their types within a shader code string.\n   *\n   * @param {string} shader - The shader code to parse\n   * @return {object} mapping of uniform names to their glsl type\n   */\n  function getShaderUniformTypes(shader) {\n    var uniformRE = /\\buniform\\s+(int|float|vec[234])\\s+([A-Za-z_][\\w]*)/g;\n    var uniforms = Object.create(null);\n    var match;\n    while ((match = uniformRE.exec(shader)) !== null) {\n      uniforms[match[2]] = match[1];\n    }\n    return uniforms\n  }\n\n  /**\n   * @class ShaderFloatArray\n   *\n   * When writing a custom WebGL shader, sometimes you need to pass it an array of floating\n   * point numbers that it can read from. Unfortunately this is very difficult to do in WebGL,\n   * because:\n   *\n   *   - GLSL \"array\" uniforms can only be of a constant length.\n   *   - Textures can only hold floating point numbers in WebGL1 if the `OES_texture_float`\n   *     extension is available.\n   *\n   * ShaderFloatArray is an array-like abstraction that encodes its floating point data into\n   * an RGBA texture's four Uint8 components, and provides the corresponding ThreeJS uniforms\n   * and GLSL code for you to put in your custom shader to query the float values by array index.\n   *\n   * This should generally only be used within a fragment shader, as some environments (e.g. iOS)\n   * only allow texture lookups in fragment shaders.\n   *\n   * TODO:\n   *   - Fix texture to fill both dimensions so we don't easily hit max texture size limits\n   *   - Use a float texture if the extension is available so we can skip the encoding process\n   */\n  var ShaderFloatArray = function ShaderFloatArray(name) {\n    this.name = name;\n    this.textureUniform = \"dataTex_\" + name;\n    this.textureSizeUniform = \"dataTexSize_\" + name;\n    this.multiplierUniform = \"dataMultiplier_\" + name;\n\n    /**\n     * @property dataSizeUniform - the name of the GLSL uniform that will hold the\n     * length of the data array.\n     * @type {string}\n     */\n    this.dataSizeUniform = \"dataSize_\" + name;\n\n    /**\n     * @property readFunction - the name of the GLSL function that should be called to\n     * read data out of the array by index.\n     * @type {string}\n     */\n    this.readFunction = \"readData_\" + name;\n\n    this._raw = new Float32Array(0);\n    this._texture = new three.DataTexture(new Uint8Array(0), 0, 1);\n    this._length = 0;\n    this._multiplier = 1;\n  };\n\n  var prototypeAccessors = { length: { configurable: true } };\n\n  /**\n   * @property length - the current length of the data array\n   * @type {number}\n   */\n  prototypeAccessors.length.set = function (value) {\n    if (value !== this._length) {\n      // Find nearest power-of-2 that holds the new length\n      var size = Math.pow(2, Math.ceil(Math.log2(value)));\n      var raw = this._raw;\n      if (size < raw.length) {\n        this._raw = raw.subarray(0, size);\n      }\n      else if(size > raw.length) {\n        this._raw = new Float32Array(size);\n        this._raw.set(raw);\n      }\n      this._length = value;\n    }\n  };\n  prototypeAccessors.length.get = function () {\n    return this._length\n  };\n\n  /**\n   * Add a value to the end of the data array\n   * @param {number} value\n   */\n  ShaderFloatArray.prototype.push = function push (value) {\n    return this.set(this.length++, value)\n  };\n\n  /**\n   * Replace the existing data with that from a new array\n   * @param {ArrayLike<number>} array\n   */\n  ShaderFloatArray.prototype.setArray = function setArray (array) {\n    this.length = array.length;\n    this._raw.set(array);\n    this._needsRepack = true;\n  };\n\n  /**\n   * Get the current value at index\n   * @param {number} index\n   * @return {number}\n   */\n  ShaderFloatArray.prototype.get = function get (index) {\n    return this._raw[index]\n  };\n\n  ShaderFloatArray.prototype.set = function set (index, value) {\n    if (index + 1 > this._length) {\n      this.length = index + 1;\n    }\n    if (value !== this._raw[index]) {\n      this._raw[index] = value;\n      encodeFloatToFourInts(\n        value / this._multiplier,\n        this._texture.image.data,\n        index * 4\n      );\n      this._needsMultCheck = true;\n    }\n  };\n\n  /**\n   * Make a copy of this ShaderFloatArray\n   * @return {ShaderFloatArray}\n   */\n  ShaderFloatArray.prototype.clone = function clone () {\n    var clone = new ShaderFloatArray(this.name);\n    clone.setArray(this._raw);\n    return clone\n  };\n\n  /**\n   * Retrieve the set of Uniforms that must to be added to the target ShaderMaterial or\n   * DerivedMaterial, to feed the GLSL code generated by {@link #getShaderHeaderCode}.\n   * @return {Object}\n   */\n  ShaderFloatArray.prototype.getShaderUniforms = function getShaderUniforms () {\n      var obj;\n\n    var me = this;\n    return ( obj = {}, obj[this.textureUniform] = {get value() {\n        me._sync();\n        return me._texture\n      }}, obj[this.textureSizeUniform] = {get value() {\n        me._sync();\n        return me._texture.image.width\n      }}, obj[this.dataSizeUniform] = {get value() {\n        me._sync();\n        return me.length\n      }}, obj[this.multiplierUniform] = {get value() {\n        me._sync();\n        return me._multiplier\n      }}, obj )\n  };\n\n  /**\n   * Retrieve the GLSL code that must be injected into the shader's definitions area to\n   * enable reading from the data array. This exposes a function with a name matching\n   * the {@link #readFunction} property, which other shader code can call to read values\n   * from the array by their index.\n   * @return {string}\n   */\n  ShaderFloatArray.prototype.getShaderHeaderCode = function getShaderHeaderCode () {\n    var ref = this;\n      var textureUniform = ref.textureUniform;\n      var textureSizeUniform = ref.textureSizeUniform;\n      var dataSizeUniform = ref.dataSizeUniform;\n      var multiplierUniform = ref.multiplierUniform;\n      var readFunction = ref.readFunction;\n    return (\"\\nuniform sampler2D \" + textureUniform + \";\\nuniform float \" + textureSizeUniform + \";\\nuniform float \" + dataSizeUniform + \";\\nuniform float \" + multiplierUniform + \";\\n\\nfloat \" + readFunction + \"(float index) {\\n  vec2 texUV = vec2((index + 0.5) / \" + textureSizeUniform + \", 0.5);\\n  vec4 pixel = texture2D(\" + textureUniform + \", texUV);\\n  return dot(pixel, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0)) * \" + multiplierUniform + \";\\n}\\n\")\n  };\n\n  /**\n   * @private Synchronize any pending changes to the underlying DataTexture\n   */\n  ShaderFloatArray.prototype._sync = function _sync () {\n    var tex = this._texture;\n    var raw = this._raw;\n    var needsRepack = this._needsRepack;\n\n    // If the size of the raw array changed, resize the texture to match\n    if (raw.length !== tex.image.width) {\n      tex.image = {\n        data: new Uint8Array(raw.length * 4),\n        width: raw.length,\n        height: 1\n      };\n      needsRepack = true;\n    }\n\n    // If the values changed, check the multiplier. This should be a value by which\n    // all the values are divided to constrain them to the [0,1] range required by\n    // the Uint8 packing algorithm. We pick the nearest power of 2 that holds the\n    // maximum value for greatest accuracy.\n    if (needsRepack || this._needsMultCheck) {\n      var maxVal = this._raw.reduce(function (a, b) { return Math.max(a, b); }, 0);\n      var mult = Math.pow(2, Math.ceil(Math.log2(maxVal)));\n      if (mult !== this._multiplier) {\n        this._multiplier = mult;\n        needsRepack = true;\n      }\n      tex.needsUpdate = true;\n      this._needsMultCheck = false;\n    }\n\n    // If things changed in a way we need to repack, do so\n    if (needsRepack) {\n      for (var i = 0, len = raw.length, mult$1 = this._multiplier; i < len; i++) {\n        encodeFloatToFourInts(raw[i] / mult$1, tex.image.data, i * 4);\n      }\n      this._needsRepack = false;\n    }\n  };\n\n  Object.defineProperties( ShaderFloatArray.prototype, prototypeAccessors );\n\n\n\n  /**\n   * Encode a floating point number into a set of four 8-bit integers.\n   * Also see the companion decoder function #decodeFloatFromFourInts.\n   *\n   * This is adapted to JavaScript from the basic approach at\n   * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n   * but writes out integers in the range 0-255 instead of floats in the range 0-1\n   * so they can be more easily used in a Uint8Array for standard WebGL rgba textures.\n   *\n   * Some precision will necessarily be lost during the encoding and decoding process.\n   * Testing shows that the maximum precision error is ~1.18e-10 which should be good\n   * enough for most cases.\n   *\n   * @param {Number} value - the floating point number to encode. Must be in the range [0, 1]\n   *        otherwise the results will be incorrect.\n   * @param {Array|Uint8Array} array - an array into which the four ints should be written\n   * @param {Number} startIndex - index in the output array at which to start writing the ints\n   * @return {Array|Uint8Array}\n   */\n  function encodeFloatToFourInts(value, array, startIndex) {\n    // This is adapted to JS from the basic approach at\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n    // but writes to a Uint8Array instead of floats. Input values must be in\n    // the range [0, 1]. The maximum error after encoding and decoding is ~1.18e-10\n    var enc0 = 255 * value;\n    var enc1 = 255 * (enc0 % 1);\n    var enc2 = 255 * (enc1 % 1);\n    var enc3 = 255 * (enc2 % 1);\n\n    enc0 = enc0 & 255;\n    enc1 = enc1 & 255;\n    enc2 = enc2 & 255;\n    enc3 = Math.round(enc3) & 255;\n\n    array[startIndex] = enc0;\n    array[startIndex + 1] = enc1;\n    array[startIndex + 2] = enc2;\n    array[startIndex + 3] = enc3;\n    return array\n  }\n\n  /*\n  Input geometry is a cylinder with r=1, height in y dimension from 0 to 1,\n  divided into a reasonable number of height segments.\n  */\n\n  var vertexDefs = \"\\nuniform vec3 pointA;\\nuniform vec3 controlA;\\nuniform vec3 controlB;\\nuniform vec3 pointB;\\nuniform float radius;\\nvarying float bezierT;\\n\\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  float b0 = t2 * t2 * t2;\\n  float b1 = 3.0 * t * t2 * t2;\\n  float b2 = 3.0 * t * t * t2;\\n  float b3 = t * t * t;\\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\\n}\\n\\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  return -3.0 * p1 * t2 * t2 +\\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\\n    3.0 * p2 * t * t;\\n}\\n\";\n\n  var vertexTransform = \"\\nfloat t = position.y;\\nbezierT = t;\\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\\n\\n// Make \\\"sideways\\\" always perpendicular to the camera ray; this ensures that any twists\\n// in the cylinder occur where you won't see them: \\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\\nif (bezierDir == viewDirection) {\\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\\n}\\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\\nvec3 upish = normalize(cross(sideways, bezierDir));\\n\\n// Build a matrix for transforming this disc in the cylinder:\\nmat4 discTx;\\ndiscTx[0].xyz = sideways * radius;\\ndiscTx[1].xyz = bezierDir * radius;\\ndiscTx[2].xyz = upish * radius;\\ndiscTx[3].xyz = bezierCenterPos;\\ndiscTx[3][3] = 1.0;\\n\\n// Apply transform, ignoring original y\\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\\nnormal = normalize(mat3(discTx) * normal);\\n\";\n\n  var fragmentDefs = \"\\nuniform vec3 dashing;\\nvarying float bezierT;\\n\";\n\n  var fragmentMainIntro = \"\\nif (dashing.x + dashing.y > 0.0) {\\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\\n  if (dashFrac > dashing.x) {\\n    discard;\\n  }\\n}\\n\";\n\n  // Debugging: separate color for each of the 6 sides:\n  // const fragmentColorTransform = `\n  // float sideNum = floor(vUV.x * 6.0);\n  // vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\n  //   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\n  //   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\n  //   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\n  //   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\n  //   vec3(1.0, 0.0, 1.0);\n  // gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\n  // `\n\n\n\n  function createBezierMeshMaterial(baseMaterial) {\n    return createDerivedMaterial(\n      baseMaterial,\n      {\n        uniforms: {\n          pointA: {value: new three.Vector3()},\n          controlA: {value: new three.Vector3()},\n          controlB: {value: new three.Vector3()},\n          pointB: {value: new three.Vector3()},\n          radius: {value: 0.01},\n          dashing: {value: new three.Vector3()} //on, off, offset\n        },\n        vertexDefs: vertexDefs,\n        vertexTransform: vertexTransform,\n        fragmentDefs: fragmentDefs,\n        fragmentMainIntro: fragmentMainIntro\n      }\n    )\n  }\n\n  var geometry = null;\n\n  var defaultBaseMaterial = new three.MeshStandardMaterial({color: 0xffffff, side: three.DoubleSide});\n\n\n  /**\n   * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\n   * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\n   * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\n   * automatically.\n   *\n   * The cubiz bezier path is determined by its four `Vector3` properties:\n   * - `pointA`\n   * - `controlA`\n   * - `controlB`\n   * - `pointB`\n   *\n   * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\n   *\n   * You can also give the tube a dashed appearance with two properties:\n   *\n   * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\n   *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\n   *   used as input to the cubic bezier function, not its visible length.)\n   * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\n   *\n   * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\n   * thicker tubes.\n   *\n   * TODO: proper geometry bounding sphere and raycasting\n   * TODO: allow control of the geometry's segment counts\n   */\n  var BezierMesh = /*@__PURE__*/(function (Mesh) {\n    function BezierMesh() {\n      Mesh.call(\n        this, BezierMesh.getGeometry(),\n        defaultBaseMaterial\n      );\n\n      this.pointA = new three.Vector3();\n      this.controlA = new three.Vector3();\n      this.controlB = new three.Vector3();\n      this.pointB = new three.Vector3();\n      this.radius = 0.01;\n      this.dashArray = new three.Vector2();\n      this.dashOffset = 0;\n\n      // TODO - disabling frustum culling until I figure out how to customize the\n      //  geometry's bounding sphere that gets used\n      this.frustumCulled = false;\n    }\n\n    if ( Mesh ) BezierMesh.__proto__ = Mesh;\n    BezierMesh.prototype = Object.create( Mesh && Mesh.prototype );\n    BezierMesh.prototype.constructor = BezierMesh;\n\n    var prototypeAccessors = { material: { configurable: true },customDepthMaterial: { configurable: true },customDistanceMaterial: { configurable: true } };\n\n    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n    BezierMesh.getGeometry = function getGeometry () {\n      return geometry || (geometry =\n        new three.CylinderBufferGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0)\n      )\n    };\n\n    prototypeAccessors.material.get = function () {\n      var derivedMaterial = this._derivedMaterial;\n      var baseMaterial = this._baseMaterial || defaultBaseMaterial;\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial);\n        // dispose the derived material when its base material is disposed:\n        baseMaterial.addEventListener('dispose', function onDispose() {\n          baseMaterial.removeEventListener('dispose', onDispose);\n          derivedMaterial.dispose();\n        });\n      }\n      return derivedMaterial\n    };\n    prototypeAccessors.material.set = function (baseMaterial) {\n      this._baseMaterial = baseMaterial;\n    };\n\n    // Create and update material for shadows upon request:\n    prototypeAccessors.customDepthMaterial.get = function () {\n      return this.material.getDepthMaterial()\n    };\n    prototypeAccessors.customDistanceMaterial.get = function () {\n      return this.material.getDistanceMaterial()\n    };\n\n    BezierMesh.prototype.onBeforeRender = function onBeforeRender (shaderInfo) {\n      var ref = this.material;\n      var uniforms = ref.uniforms;\n      var ref$1 = this;\n      var pointA = ref$1.pointA;\n      var controlA = ref$1.controlA;\n      var controlB = ref$1.controlB;\n      var pointB = ref$1.pointB;\n      var radius = ref$1.radius;\n      var dashArray = ref$1.dashArray;\n      var dashOffset = ref$1.dashOffset;\n      uniforms.pointA.value.copy(pointA);\n      uniforms.controlA.value.copy(controlA);\n      uniforms.controlB.value.copy(controlB);\n      uniforms.pointB.value.copy(pointB);\n      uniforms.radius.value = radius;\n      uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\n    };\n\n    BezierMesh.prototype.raycast = function raycast (raycaster, intersects) {\n      // TODO - just fail for now\n    };\n\n    Object.defineProperties( BezierMesh.prototype, prototypeAccessors );\n\n    return BezierMesh;\n  }(three.Mesh));\n\n  exports.BezierMesh = BezierMesh;\n  exports.ShaderFloatArray = ShaderFloatArray;\n  exports.createDerivedMaterial = createDerivedMaterial;\n  exports.expandShaderIncludes = expandShaderIncludes;\n  exports.getShaderUniformTypes = getShaderUniformTypes;\n  exports.getShadersForMaterial = getShadersForMaterial;\n  exports.voidMainRegExp = voidMainRegExp;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"},"lineCount":854}},"error":null,"hash":"67c678a90613885dff37fd32afdf39f0","cacheData":{"env":{}}}